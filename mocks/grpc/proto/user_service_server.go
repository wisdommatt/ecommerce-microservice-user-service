// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	proto "github.com/wisdommatt/ecommerce-microservice-user-service/grpc/proto"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) CreateUser(_a0 context.Context, _a1 *proto.NewUser) (*proto.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.User
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NewUser) *proto.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.NewUser) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFromJWT provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) GetUserFromJWT(_a0 context.Context, _a1 *proto.GetUserFromJWTInput) (*proto.GetUserFromJWTResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.GetUserFromJWTResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserFromJWTInput) *proto.GetUserFromJWTResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserFromJWTResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserFromJWTInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) GetUsers(_a0 context.Context, _a1 *proto.GetUsersFilter) (*proto.GetUsersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.GetUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUsersFilter) *proto.GetUsersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUsersFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) LoginUser(_a0 context.Context, _a1 *proto.LoginInput) (*proto.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginInput) *proto.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUserServiceServer provides a mock function with given fields:
func (_m *UserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_m.Called()
}
